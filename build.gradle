buildscript {
    dependencies {
        classpath 'de.sebastianboegl.gradle.plugins:shadow-log4j-transformer:1.0.1'
    }
}

plugins {
    id 'java'
    id 'org.hidetake.ssh' version '2.10.1'
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

ssh.settings {
    dryRun = project.hasProperty('dryRun')
    knownHosts = allowAnyHosts
}

version '2.0'

sourceCompatibility = 1.8

remotes {
    bigPrincessPi {
        host = bigPrincessPiSettingsHost
        user = bigPrincessPiSettingsUser
        identity = file(bigPrincessPiSettingsIdentityFile)
    }
    smallPrincessPi {
        host = smallPrincessPiSettingsHost
        user = smallPrincessPiSettingsUser
        identity = file(smallPrincessPiSettingsIdentityFile)
    }
}

//create a single Jar with all dependencies
shadowJar {
    manifest {
        attributes 'Implementation-Title': 'IA',
                'Implementation-Version': archiveVersion,
                'Main-Class': 'core.Main'
    }
//    transform(de.sebastianboegl.gradle.plugins.shadow.transformers.Log4j2PluginsFileTransformer)
}

// SSH deploy
task deployBigPrincess(dependsOn: ["shadowJar"]) {
    doLast {
        ssh.run {
            session(remotes.bigPrincessPi) {
                put from: 'build/libs/esialrobotik.ia-2.0-all.jar', into: 'IA'
                put from: 'config/2023/config.json', into: 'IA'
                put from: 'config/2023/configCollection.json', into: 'IA'
//                put from: 'config/2023/table.json', into: 'IA'
                put from: 'config/2023/table0.tbl', into: 'IA'
                put from: 'config/2023/table3000.tbl', into: 'IA'
                put from: 'src/main/java/actions/a2023/actions/', into: 'IA'
                execute 'sudo rm -rf IA/webRootDir/*'
                execute 'sudo sync'
            }
        }
    }
}

task deploySmallPrincess(dependsOn: ["shadowJar"]) {
    doLast {
        ssh.run {
            session(remotes.smallPrincessPi) {
                put from: 'build/libs/esialrobotik.ia-2.0-all.jar', into: 'IA'
                put from: 'config/2023/config_PMI.json', into: 'IA/config.json'
                put from: 'config/2023/configCollectionPmi.json', into: 'IA'
//                put from: 'config/2023/table.json', into: 'IA'
                put from: 'config/2023/table0.tbl', into: 'IA'
                put from: 'config/2023/table3000.tbl', into: 'IA'
                put from: 'src/main/java/actions/a2023/actions/', into: 'IA'
                execute 'sudo rm -rf IA/webRootDir/*'
                execute 'sudo sync'
            }
        }
    }
}

task fetchActionsBigPrincess {
    doLast {
        ssh.run {
            session(remotes.bigPrincessPi) {
                get from: 'IA/actions/', into: 'src/main/java/actions/a2023/'
            }
        }
    }
}

task fetchActionSmallPrincess {
    doLast {
        ssh.run {
            session(remotes.smallPrincessPi) {
                get from: 'IA/actions/', into: 'src/main/java/actions/a2023/'
            }
        }
    }
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencies {
    // Log4J : https://logging.apache.org/log4j/2.x/
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.13.1'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.13.1'

    // Pi4J : https://pi4j.com/1.2/index.html
    implementation 'com.pi4j:pi4j-core:1.2'

    // PiCam : https://github.com/caprica/picam
    implementation group: 'uk.co.caprica', name: 'picam', version: '2.0.2'

    // OpenCv
    implementation group: 'org.bytedeco.javacpp-presets', name: 'opencv', version: '4.0.1-1.4.4'

    // GSon
    implementation 'com.google.code.gson:gson:2.8.6'

    // RXTX
    implementation group: 'org.rxtx', name: 'rxtx', version: '2.1.7'

    // Lib de WebSocket
    implementation "org.java-websocket:Java-WebSocket:1.5.1"
}
